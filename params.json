{
  "name": "Json-server",
  "tagline": "Get a full fake REST API with zero coding in less than 30 seconds (seriously)",
  "body": "# JSON Server [![](https://travis-ci.org/typicode/json-server.svg?branch=master)](https://travis-ci.org/typicode/json-server) [![](https://badge.fury.io/js/json-server.svg)](http://badge.fury.io/js/json-server) [![](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/typicode/json-server?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nGet a full fake REST API with __zero coding__ in __less than 30 seconds__ (seriously)\r\n\r\nCreated with <3 for front-end developers who need a quick back-end for prototyping and mocking.\r\n\r\n* [Egghead.io free video tutorial - Creating demo APIs with json-server](https://egghead.io/lessons/nodejs-creating-demo-apis-with-json-server)\r\n* [JSONPlaceholder - Live running version](http://jsonplaceholder.typicode.com)\r\n\r\nSee also:\r\n* :hotel: [hotel - Get local domains in seconds](https://github.com/typicode/hotel)\r\n* :dog: [husky - Git hooks made easy](https://github.com/typicode/husky)\r\n\r\n## Example\r\n\r\nCreate a `db.json` file\r\n\r\n```json\r\n{\r\n  \"posts\": [\r\n    { \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\r\n  ],\r\n  \"comments\": [\r\n    { \"id\": 1, \"body\": \"some comment\", \"postId\": 1 }\r\n  ],\r\n  \"profile\": { \"name\": \"typicode\" }\r\n}\r\n```\r\n\r\nStart JSON Server\r\n\r\n```bash\r\n$ json-server --watch db.json\r\n```\r\n\r\nNow if you go to [http://localhost:3000/posts/1](), you'll get\r\n\r\n```json\r\n{ \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\r\n```\r\n\r\nAlso when doing requests, its good to know that\r\n- If you make POST, PUT, PATCH or DELETE requests, changes will be automatically and safely saved to `db.json` using [lowdb](https://github.com/typicode/lowdb).\r\n- Your request body JSON should be object enclosed, just like the GET output. (for example `{\"name\": \"Foobar\"}`)\r\n- Id values are not mutable. Any `id` value in the body of your PUT or PATCH request wil be ignored. Only a value set in a POST request wil be respected, but only if not already taken.\r\n- A POST, PUT or PATCH request should include a `Content-Type: application/json` header to use the JSON in the request body. Otherwise it will result in a 200 OK but without changes being made to the data.\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install -g json-server\r\n```\r\n\r\n## Routes\r\n\r\nBased on the previous `db.json` file, here are all the default routes. You can also add [other routes](#add-routes) using `--routes`.\r\n\r\n### Plural routes\r\n\r\n```\r\nGET    /posts\r\nGET    /posts/1\r\nPOST   /posts\r\nPUT    /posts/1\r\nPATCH  /posts/1\r\nDELETE /posts/1\r\n```\r\n\r\n### Singular routes\r\n\r\n```\r\nGET    /profile\r\nPOST   /profile\r\nPUT    /profile\r\nPATCH  /profile\r\n```\r\n\r\n### Filter\r\n\r\nUse `.` to access deep properties\r\n\r\n```\r\nGET /posts?title=json-server&author=typicode\r\nGET /posts?id=1&id=2\r\nGET /comments?author.name=typicode\r\n```\r\n\r\n### Paginate\r\n\r\nAdd `_page` and in the `Link` header you'll get `first`, `prev`, `next` and `last` links\r\n\r\n```\r\nGET /posts?_page=7\r\n```\r\n\r\n_10 items are returned by default_\r\n\r\n### Sort\r\n\r\nAdd `_sort` and `_order` (ascending order by default)\r\n\r\n```\r\nGET /posts?_sort=views&_order=DESC\r\nGET /posts/1/comments?_sort=votes&_order=ASC\r\n```\r\n\r\n### Slice\r\n\r\nAdd `_start` and `_end` or `_limit` (an `X-Total-Count` header is included in the response)\r\n\r\n```\r\nGET /posts?_start=20&_end=30\r\nGET /posts/1/comments?_start=20&_end=30\r\nGET /posts/1/comments?_start=20&_limit=10\r\n```\r\n\r\n### Operators\r\n\r\nAdd `_gte` or `_lte` for getting a range\r\n\r\n```\r\nGET /posts?views_gte=10&views_lte=20\r\n```\r\n\r\nAdd `_ne` to exclude a value\r\n\r\n```\r\nGET /posts?id_ne=1\r\n```\r\n\r\nAdd `_like` to filter (RegExp supported)\r\n\r\n```\r\nGET /posts?title_like=server\r\n```\r\n\r\n### Full-text search\r\n\r\nAdd `q`\r\n\r\n```\r\nGET /posts?q=internet\r\n```\r\n\r\n### Relationships\r\n\r\nTo include children resources, add `_embed`\r\n\r\n```\r\nGET /posts?_embed=comments\r\nGET /posts/1?_embed=comments\r\n```\r\n\r\nTo include parent resource, add `_expand`\r\n\r\n```\r\nGET /comments?_expand=post\r\nGET /comments/1?_expand=post\r\n```\r\n\r\nTo get or create nested resources (by default one level, [add routes](#add-routes) for more)\r\n\r\n```\r\nGET  /posts/1/comments\r\nPOST /posts/1/comments\r\n```\r\n\r\n### Database\r\n\r\n```\r\nGET /db\r\n```\r\n\r\n### Homepage\r\n\r\nReturns default index file or serves `./public` directory\r\n\r\n```\r\nGET /\r\n```\r\n\r\n## Extras\r\n\r\n### Static file server\r\n\r\nYou can use JSON Server to serve your HTML, JS and CSS, simply create a `./public` directory\r\nor use `--static` to set a different static files directory.\r\n\r\n```bash\r\nmkdir public\r\necho 'hello world' > public/index.html\r\njson-server db.json\r\n```\r\n\r\n```bash\r\njson-server db.json --static ./some-other-dir\r\n```\r\n\r\n### Alternative port\r\n\r\nYou can start JSON Server on other ports with the `--port` flag:\r\n\r\n```bash\r\n$ json-server --watch db.json --port 3004\r\n```\r\n\r\n### Access from anywhere\r\n\r\nYou can access your fake API from anywhere using CORS and JSONP.\r\n\r\n### Remote schema\r\n\r\nYou can load remote schemas.\r\n\r\n```bash\r\n$ json-server http://example.com/file.json\r\n$ json-server http://jsonplaceholder.typicode.com/db\r\n```\r\n\r\n### Generate random data\r\n\r\nUsing JS instead of a JSON file, you can create data programmatically.\r\n\r\n```javascript\r\n// index.js\r\nmodule.exports = function() {\r\n  var data = { users: [] }\r\n  // Create 1000 users\r\n  for (var i = 0; i < 1000; i++) {\r\n    data.users.push({ id: i, name: 'user' + i })\r\n  }\r\n  return data\r\n}\r\n```\r\n\r\n```bash\r\n$ json-server index.js\r\n```\r\n\r\n__Tip__ use modules like [faker](https://github.com/Marak/faker.js), [casual](https://github.com/boo1ean/casual) or [chance](https://github.com/victorquinn/chancejs).\r\n\r\n### Add routes\r\n\r\nCreate a `routes.json` file. Pay attention to start every route with /.\r\n\r\n```json\r\n{\r\n  \"/api/\": \"/\",\r\n  \"/blog/:resource/:id/show\": \"/:resource/:id\"\r\n}\r\n```\r\n\r\nStart JSON Server with `--routes` option.\r\n\r\n```bash\r\njson-server db.json --routes routes.json\r\n```\r\n\r\nNow you can access resources using additional routes.\r\n\r\n```bash\r\n/api/posts\r\n/api/posts/1\r\n/blog/posts/1/show\r\n```\r\n\r\n### Add middlewares\r\n\r\nYou can add your middlewares from the CLI using `--middlewares` option:\r\n\r\n```js\r\n// first.js\r\nmodule.exports = function (req, res, next) {\r\n  res.Header('X-Hello', 'World')\r\n}\r\n```\r\n\r\n```bash\r\njson-server db.json --middlewares ./hello.js\r\njson-server db.json --middlewares ./first.js ./second.js\r\n```\r\n\r\n### CLI usage\r\n\r\n```\r\njson-server [options] <source>\r\n\r\nOptions:\r\n  --config, -c       Path to config file           [default: \"json-server.json\"]\r\n  --port, -p         Set port                                    [default: 3000]\r\n  --host, -H         Set host                               [default: \"0.0.0.0\"]\r\n  --watch, -w        Watch file(s)                                     [boolean]\r\n  --routes, -r       Path to routes file\r\n  --middlewares, -m  Paths to middleware files                           [array]\r\n  --static, -s       Set static files directory\r\n  --read-only, --ro  Allow only GET requests                           [boolean]\r\n  --no-cors, --nc    Disable Cross-Origin Resource Sharing             [boolean]\r\n  --no-gzip, --ng    Disable GZIP Content-Encoding                     [boolean]\r\n  --snapshots, -S    Set snapshots directory                      [default: \".\"]\r\n  --delay, -d        Add delay to responses (ms)\r\n  --id, -i           Set database id property (e.g. _id)         [default: \"id\"]\r\n  --quiet, -q        Suppress log messages from output                 [boolean]\r\n  --help, -h         Show help                                         [boolean]\r\n  --version, -v      Show version number                               [boolean]\r\n\r\nExamples:\r\n  json-server db.json\r\n  json-server file.js\r\n  json-server http://example.com/db.json\r\n\r\nhttps://github.com/typicode/json-server\r\n```\r\n\r\nYou can also set options in a `json-server.json` configuration file.\r\n\r\n```json\r\n{\r\n  \"port\": 3000\r\n}\r\n```\r\n\r\n### Module\r\n\r\nIf you need to add authentication, validation, or __any behavior__, you can use the project as a module in combination with other Express middlewares.\r\n\r\n#### Simple example\r\n\r\n```js\r\n// server.js\r\nvar jsonServer = require('json-server')\r\nvar server = jsonServer.create()\r\nvar router = jsonServer.router('db.json')\r\nvar middlewares = jsonServer.defaults()\r\n\r\nserver.use(middlewares)\r\nserver.use(router)\r\nserver.listen(3000, function () {\r\n  console.log('JSON Server is running')\r\n})\r\n```\r\n\r\n```sh\r\n$ node server.js\r\n```\r\n\r\nFor an in-memory database, you can pass an object to `jsonServer.router()`.\r\nPlease note also that `jsonServer.router()` can be used in existing Express projects.\r\n\r\n#### Custom routes example\r\n\r\nLet's say you want a route that echoes query parameters and another one that set a timestamp on every resource created.\r\n\r\n```js\r\nvar jsonServer = require('json-server')\r\nvar server = jsonServer.create()\r\nvar router = jsonServer.router('db.json')\r\nvar middlewares = jsonServer.defaults()\r\n\r\n// Set default middlewares (logger, static, cors and no-cache)\r\nserver.use(middlewares)\r\n\r\n// Add custom routes before JSON Server router\r\nserver.get('/echo', function (req, res) {\r\n  res.jsonp(req.query)\r\n})\r\n\r\nserver.use(function (req, res, next) {\r\n  if (req.method === 'POST') {\r\n    req.body.createdAt = Date.now()\r\n  }\r\n  // Continue to JSON Server router\r\n  next()\r\n})\r\n\r\n// Use default router\r\nserver.use(router)\r\nserver.listen(3000, function () {\r\n  console.log('JSON Server is running')\r\n})\r\n```\r\n\r\n#### Access control example\r\n\r\n```js\r\nvar jsonServer = require('json-server')\r\nvar server = jsonServer.create()\r\nvar router = jsonServer.router('db.json')\r\nvar middlewares = jsonServer.defaults()\r\n\r\nserver.use(middlewares)\r\nserver.use(function (req, res, next) {\r\n if (isAuthorized(req)) { // add your authorization logic here\r\n   next() // continue to JSON Server router\r\n } else {\r\n   res.sendStatus(401)\r\n }\r\n})\r\nserver.use(router)\r\nserver.listen(3000, function () {\r\n  console.log('JSON Server is running')\r\n})\r\n```\r\n\r\n#### Custom output example\r\n\r\nTo modify responses, overwrite `router.render` method:\r\n\r\n```javascript\r\n// In this example, returned resources will be wrapped in a body property\r\nrouter.render = function (req, res) {\r\n  res.jsonp({\r\n   body: res.locals.data\r\n  })\r\n}\r\n```\r\n\r\n#### Rewriter example\r\n\r\nTo add rewrite rules, use `jsonServer.rewriter()`:\r\n\r\n```javascript\r\n// Add this before server.use(router)\r\nserver.use(jsonServer.rewriter({\r\n  '/api/': '/',\r\n  '/blog/:resource/:id/show': '/:resource/:id'\r\n}))\r\n```\r\n\r\n#### Mounting JSON Server on another endpoint example\r\n\r\nAlternatively, you can also mount the router on `/api`.\r\n\r\n```javascript\r\nserver.use('/api', router)\r\n```\r\n\r\n### Deployment\r\n\r\nYou can deploy JSON Server. For example, [JSONPlaceholder](http://jsonplaceholder.typicode.com) is an online fake API powered by JSON Server and running on Heroku.\r\n\r\n## Links\r\n\r\n### Video\r\n\r\n* [Creating Demo APIs with json-server on egghead.io](https://egghead.io/lessons/nodejs-creating-demo-apis-with-json-server)\r\n\r\n### Articles\r\n\r\n* [Node Module Of The Week - json-server](http://nmotw.in/json-server/)\r\n* [Mock up your REST API with JSON Server](http://www.betterpixels.co.uk/projects/2015/05/09/mock-up-your-rest-api-with-json-server/)\r\n* [ng-admin: Add an AngularJS admin GUI to any RESTful API](http://marmelab.com/blog/2014/09/15/easy-backend-for-your-restful-api.html)\r\n* [Fast prototyping using Restangular and Json-server](http://glebbahmutov.com/blog/fast-prototyping-using-restangular-and-json-server/)\r\n* [Create a Mock REST API in Seconds for Prototyping your Frontend](https://coligo.io/create-mock-rest-api-with-json-server/)\r\n\r\n### Third-party tools\r\n\r\n* [Grunt JSON Server](https://github.com/tfiwm/grunt-json-server)\r\n* [Docker JSON Server](https://github.com/clue/docker-json-server)\r\n* [JSON Server GUI](https://github.com/naholyr/json-server-gui)\r\n* [JSON file generator](https://github.com/dfsq/json-server-init)\r\n\r\n## License\r\n\r\nMIT - [Typicode](https://github.com/typicode)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}